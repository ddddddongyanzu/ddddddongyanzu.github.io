I"F~<h2 id="java实战">JAVA实战</h2>

<h3 id="11-编程语言">1.1 编程语言</h3>

<p>​	<em>java作为一门伟大的面向对象程序设计语言，诞生于1995年5月（由Sun Microsystem推出），目前属于oracle公司。</em></p>

<p>​	高级语言，必须被翻译成低级语言（机器语言【汇编】）后才能够被运行。</p>

<p>​											<img src="images/posts/lanuage.svg" alt="lanuage" /></p>

<p>作为高级语言有很多优点：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	1. **代码容易阅读和修改**
	1. **具备可移植性，一次编译到处执行.**
</code></pre></div></div>

<p>​	<strong><em>java可以被编译，也可以被执行。Java编译过程并不生成机器语言，而是生成字节码。字节码和机器语言一样，但其具备高级语言的可移植性。</em></strong></p>

<h3 id="12-java程序的构成">1.2 Java程序的构成</h3>

<p>​	<strong><em>源代码在经过编译器编译后，除了生成字节码还会创建 JVM（Java virtual machine[Java虚拟机]）通过JVM支持java的解释和运行。</em></strong></p>

<p><img src="/Users/dongyanzu/Desktop/typora/javacompile.svg" alt="javacompile" /></p>

<p>​	Java源代码（后缀为.java的文本文件）比如：</p>

<p>​		<code class="language-plaintext highlighter-rouge">public class HelloWord {</code></p>

<p>​			<code class="language-plaintext highlighter-rouge">public static void main(String[] args ) {</code></p>

<p>​				<code class="language-plaintext highlighter-rouge">System.out.println("Hello World");</code></p>

<p><code class="language-plaintext highlighter-rouge">}	}</code></p>

<p>Public class : Java文件的固定格式，声明当前代码为一个Java类.</p>

<p>HelloWord: Java源代码的类名称,比java文件名少了.java后缀，遵循大驼峰命名法.</p>

<p>main方法：Java程序执行从这里开始，没有main函数，Java程序就无法执行.</p>

<p>{} 是Java代码的规范，代码内容都应该被大括号包围住,类要有大括号，方法也要大括号。</p>

<p>println 与print ：</p>

<p>​	<code class="language-plaintext highlighter-rouge">System.out.println（""）与System.out.print("")</code></p>

<p>​	都是打印括号里面内容，但是ln（new line）会换行。</p>

<h3 id="13-创建-java类文件">1.3 创建 Java类文件</h3>

<blockquote>
  <p>Java一切皆对象</p>
</blockquote>

<p>Java 类规范:</p>

<blockquote>
  <p>Java 文件名都是由首字母大写的英文单词组成</p>
</blockquote>

<p>Java源码是由多个后缀名为.java的文本文件组成。创建 Java 类文件有四个规范需要遵守</p>

<ol>
  <li>
    <p>文件名由 类名 + .java 组成 比如 HelloWorld.java，其中Hello World 遵循大驼峰命名法</p>
  </li>
  <li>
    <p>类名中不能有中文和特殊字符，只能包含字母和数字</p>
  </li>
  <li>
    <p>Java类内容遵循固定格式:</p>

    <p>public class 类名称 {</p>

    <p>}</p>
  </li>
  <li>
    <p>Java类是存放在Java包中的，默认情况下Java 工程中的代码是存放在<code class="language-plaintext highlighter-rouge">src/main/java</code>目录中。</p>
  </li>
</ol>

<p>驼峰命名法(代码规范)：</p>

<p>一般Java类的命名用大驼峰: HelloWorld.Java</p>

<p>方法和变量一般用小驼峰:	String userName;    void String myMethod(){}</p>

<h3 id="14-java-包管理器">1.4 Java 包管理器</h3>

<p>​	在<code class="language-plaintext highlighter-rouge">src/main/java</code>文件夹下，Java工程会自动把这个文件夹下的代码认定为源码,但如果在这个目录下不断创建Java文件，非常不利于管理。所以需要分类进行文件管理。</p>

<p>​	创建一个包需要确定其文件夹的相对路径，比如fm.douban.app，其包名即也是fm.douban.app。</p>

<p>​	<code class="language-plaintext highlighter-rouge">其中类代码会有 package fm.douban.app</code></p>

<p>​	一个文件只有一个<strong>package</strong>语句，并且一般是在文件的第一行,如果需要调用这个文件中的内容如方法，则需要导包import。</p>

<p>​	一般团队的规范中 <code class="language-plaintext highlighter-rouge">model</code>包名称一般用于存放描述事物的类,<code class="language-plaintext highlighter-rouge">service</code>包名称一般用于存放实现类,<code class="language-plaintext highlighter-rouge">control</code>包一般用于存放控制类.</p>

<h3 id="15-java-代码注释">1.5 Java 代码注释</h3>

<p>​	Java 功能代码是英文的，是计算机系统编译、运行的。但注释不是具体的功能，它是用来帮助人来理解代码的，所以编写代码需要多使用注释，以便自己日后翻看或者别人借鉴提供方便理解的渠道。</p>

<p>行注释(一般用于一行文字描述):</p>

<p><code class="language-plaintext highlighter-rouge">// 我是行注释</code></p>

<p>块注释（我们一般在Java类的声明上面、方面上面使用块注释):</p>

<p><code class="language-plaintext highlighter-rouge">/*</code></p>

<p><code class="language-plaintext highlighter-rouge">**我是块注释**</code></p>

<p><code class="language-plaintext highlighter-rouge">*/ </code></p>

<p>一般来说，先对每个类文件都养成块注释的好习惯，一般要起到让别人知道 作者，时间，类的作用的功能.</p>

<p><code class="language-plaintext highlighter-rouge">/*</code></p>

<p><code class="language-plaintext highlighter-rouge">*hello world.</code></p>

<p><code class="language-plaintext highlighter-rouge">*@authot:Jerry</code></p>

<p><code class="language-plaintext highlighter-rouge">*@date:2022.3.7</code></p>

<p><code class="language-plaintext highlighter-rouge">**/</code></p>

<h3 id="21-项目介绍">2.1 项目介绍</h3>

<p>​	该简易项目主要是为了了解Java。主要设计到如下知识点：</p>

<ul>
  <li>
    <p>导入包</p>
  </li>
  <li>
    <p>Java变量</p>
  </li>
  <li>
    <p>对象实例化</p>
  </li>
  <li>
    <p>构造函数</p>
  </li>
  <li>
    <p>方法调用</p>
  </li>
  <li>
    <p>Lambda表达式</p>
  </li>
  <li>
    <p>继承</p>
  </li>
  <li>
    <p>注解</p>

    <p>每个内容都是Java的基础知识点，需要熟练掌握。学习这些知识的最好方法一般是先回用，再去看底层原理。该项目还会包括SpringBoot框架（目前最主流的Java应用框架）和Vaadin框架（支持用Java语言开发Wev页面的框架）。</p>
  </li>
</ul>

<h3 id="22-对象变量">2.2 对象变量</h3>

<p>​	对象类在Java当中必须要被实例化（初始化）Java 自带类一些基础对象 ：</p>

<ul>
  <li>java.lang.String. #”String”</li>
  <li>java.lang.Interger # 12345</li>
  <li>java.lang.Double #13.14</li>
  <li>javalang.Boolean # true false</li>
</ul>

<p>​	声明+变量名：</p>

<p>​		String userName = new String(“xxx”)； 旧写法</p>

<p>​		String userName = new String(“Jerry”);</p>

<p>​	关键词：</p>

<ul>
  <li>public</li>
  <li>class</li>
  <li>void</li>
  <li>int（关键词不能用于作变量名。）</li>
</ul>

<h3 id="23方法调用">2.3方法调用</h3>

<p>Vaddin作为一个优秀的Web组件框架 ，其最强大的地方是在于使用了 Java后端语言编写前端页面，可以用它来替代 Java Swing 的技术体系。</p>

<p>Vaddin提供了非常丰富的组件 其中包括</p>

<ul>
  <li>
    <p>表单输入类</p>

    <p>单选框、复选框、下拉框、日期输入框、邮箱输入框、数字输入框、密码输入框、文本以及文件上传框等等。</p>
  </li>
  <li>
    <p>可视化与交互组件</p>

    <p>按钮、图标、连接、菜单、对话框、表格、树形表格、进度条以及标签页等等</p>
  </li>
  <li>
    <p>布局类</p>
  </li>
</ul>

<p>​	应用布局、表单布局、登陆框等等</p>

<ul>
  <li>高级组件（收费项目）</li>
</ul>

<p>​	图标、高级表格、富文本编辑器以及类Excel的编辑组件</p>

<p>首先看最常用的输入框和布局组件：</p>

<ul>
  <li>输入框组件（TextField）</li>
</ul>

<p>​	<img src="/Users/dongyanzu/Desktop/typora/text-field.png" alt="text-field" /></p>

<p><code class="language-plaintext highlighter-rouge">TextField field = new TextField();</code></p>

<p>其中Vaddin中，TextField组件完整的类路径是 <code class="language-plaintext highlighter-rouge">com.vaddin.flow.component.textfield.TextField</code></p>

<ul>
  <li>布局组件 （OrderedLayout)</li>
</ul>

<p>Vaddin中提供了很多种布局方法，但是最常用的还是 Ordered Layout</p>

<p><img src="/Users/dongyanzu/Desktop/typora/ordered-layout.png" alt="ordered-layout" /></p>

<p>该布局方法支持 垂直和水平布局</p>

<p>使用该布局方法需要对其进行继承<strong>extends</strong>。</p>

<p>上面textField代码中field组件可以被OrderedLayout方法添加</p>

<p><code class="language-plaintext highlighter-rouge">add（field）</code>即可</p>

<h3 id="24-变量对象的方法调用">2.4 变量对象的方法调用</h3>

<p>由上图中可以看出，TextFiled还有很多效果，日常很多报名表均会用到Text Field，如下图</p>

<p><img src="/Users/dongyanzu/Desktop/typora/text1.png" alt="text1" /></p>

<p>上面的实现方法分别为:</p>

<ul>
  <li>setLabel(String label)   <code class="language-plaintext highlighter-rouge">//label的内容不会显示在Label框中，但是填入值后会递交数据</code></li>
  <li>setPlaceholder(String placeholder) <code class="language-plaintext highlighter-rouge">//label的内容不会显示在Label框中，但是填入值后会消失</code></li>
  <li>setValue(String value)  <code class="language-plaintext highlighter-rouge">设置一个值（可修改）</code></li>
</ul>

<h3 id="25-构造函数">2.5 构造函数</h3>

<p>补充Java对象构造函数的知识点， 创建变量的时候，使用的技术就是构造函数（该实战案例中Public Todo() {} 为构造函数)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Route</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Todo</span> <span class="kd">extends</span> <span class="nc">VerticalLayout</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="nf">Todo</span><span class="o">()</span> <span class="o">{</span>

      <span class="nc">TextField</span> <span class="n">userNameField</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextField</span><span class="o">();</span>

      <span class="nc">String</span> <span class="n">userName</span> <span class="o">=</span><span class="s">"UserName"</span><span class="o">;</span>
      <span class="n">userNameField</span><span class="o">.</span><span class="na">setLabel</span><span class="o">(</span><span class="n">userName</span><span class="o">);</span>

      <span class="n">add</span><span class="o">(</span><span class="n">userNameField</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>构造函数为一种特殊的方法，我们在new 这个对象的时候 同时调用了此构造函数。</p>

<h3 id="31-button按钮">3.1 Button按钮</h3>

<p>在很多页面中都能看见按钮（button），像注册按钮，登录按钮，提交按钮，点赞按钮等等，基本上只要有信息录入的表单信息就会有button。</p>

<p>在vaadin框架中，button的完整类路径是</p>

<p><code class="language-plaintext highlighter-rouge">com.vaddin.flow.component.button.Button</code></p>

<p>那么可以通过</p>

<p><code class="language-plaintext highlighter-rouge">// 创建Button  </code></p>

<p><code class="language-plaintext highlighter-rouge">Button addButton = new Button();</code></p>

<p><code class="language-plaintext highlighter-rouge">实例中添加按钮实例</code></p>

<p><code class="language-plaintext highlighter-rouge">add(addButton)；</code></p>

<h3 id="32-lambda表达式">3.2 Lambda表达式</h3>

<p>button按钮得到的响应的行为 称为事件 Java在过去使用匿名函数来支持事件能力，随着Java8的升级后现在更推荐使用<code class="language-plaintext highlighter-rouge">Lambda</code>来支持事件行为。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Button</span> <span class="n">loginButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"Login"</span><span class="o">);</span>
<span class="c1">// 给 loginButton 添加一个点击事件</span>
<span class="n">loginButton</span><span class="o">.</span><span class="na">addClickListener</span><span class="o">(</span><span class="n">click</span><span class="o">-&gt;{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"login"</span><span class="o">);</span>
<span class="o">});</span>
</code></pre></div></div>

<h3 id="33逻辑语句">3.3逻辑语句</h3>

<p>常见的if格式为</p>

<p>if(布尔表达式) {</p>

<p>​	// 布尔表达式将true将执行的语句</p>

<p>}</p>

<p>比如在登录行为中对用户名、密码进行比对代码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">loginButton</span><span class="o">.</span><span class="na">addClickListener</span><span class="o">(</span><span class="n">click</span> <span class="o">-&gt;</span> <span class="o">{</span>

    <span class="nc">String</span> <span class="n">userNameText</span> <span class="o">=</span> <span class="n">userNameField</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>

    <span class="k">if</span> <span class="o">(</span><span class="s">"admin"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">userNameText</span><span class="o">)){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"用户名正确"</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">});</span>
</code></pre></div></div>

<p>在vaadin框架中，还有个专门的提示组件<code class="language-plaintext highlighter-rouge">Notification</code>它的完整路径为</p>

<p><code class="language-plaintext highlighter-rouge">com.vaadin.flow.component.notification.Notification</code></p>

<p>Notification 组件有几个重要的方法</p>

<ul>
  <li>setText(String text)</li>
</ul>

<blockquote>
  <p>设置提示的内容</p>
</blockquote>

<ul>
  <li>setDuration(int duration)</li>
</ul>

<blockquote>
  <p>设置提示框持续的时间</p>
</blockquote>

<ul>
  <li>open()</li>
</ul>

<blockquote>
  <p>显示提示框</p>
</blockquote>

<h3 id="34-注解">3.4 注解</h3>

<p>在Vaddin框架中， 使用了注解技术来支持多页</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.vaadin.flow.router.Route</span><span class="o">;</span>

<span class="nd">@Route</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Todo</span> <span class="kd">extends</span> <span class="nc">VerticalLayout</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<p>@Route(“/”) 就是一个注解</p>

<h3 id="41-面向对象概要">4.1 面向对象概要</h3>

<p>前面已经接触到的对象</p>

<ul>
  <li>TextField</li>
</ul>

<blockquote>
  <p>处理输入框的对象</p>
</blockquote>

<ul>
  <li>Button</li>
</ul>

<blockquote>
  <p>处理按钮行为的对象</p>
</blockquote>

<ul>
  <li>Route</li>
</ul>

<blockquote>
  <p>处理页面地址的对象</p>
</blockquote>

<ul>
  <li>VerticalLayout</li>
</ul>

<blockquote>
  <p>处理页面布局的对象</p>
</blockquote>

<ul>
  <li>String</li>
</ul>

<blockquote>
  <p>存储字符串的类对象</p>
</blockquote>

<ul>
  <li>Boolean / boolean</li>
</ul>

<blockquote>
  <p>存储布尔的类对象</p>
</blockquote>

<ul>
  <li>Integer / int</li>
</ul>

<blockquote>
  <p>存储数字类型的类对象</p>
</blockquote>

<p>在完成用户注册这个功能后，注册完用户后还需要将对象存储下来。这样才能支持登录。</p>

<p>接下来要了解</p>

<ol>
  <li><strong>对象的封装</strong>（将用户数据封装成为Java能识别的User对象）</li>
  <li><strong>日期对象</strong>（比如gmtCreatedTime和gmtModifiedTime 一般存储为计算机的日期类型，这样既能减少内存的存储空间，又能做日期计算.）</li>
  <li><strong>封装对象的数据操作</strong> （对User对象数据的读写）</li>
  <li><strong>集合和循环</strong> （存储多个注册用户）</li>
  <li><strong>常量</strong> （完成对象的存储）</li>
</ol>

<h3 id="42-封装user对象">4.2 封装User对象</h3>

<p>​	如果要完成用户注册的数据存储，第一步先要完成对于User对象进行封装.</p>

<p>要抽象某个事物，就是创建这个事物对应的Java类。一般这种封装事物的类对象都放在xxx.model这个子包里。抽象完类对象之后，下一步就是解决事物的属性。比如用户信息基本包含了两个属性。</p>

<ul>
  <li>用户名</li>
  <li>密码</li>
</ul>

<p>一般将事物属性抽象变成类的变量。在很多时候，企业里会把这种封装的对象成为POJO类。</p>

<h3 id="43-localdatetime">4.3 LocalDateTime</h3>

<p>在Java当中，有两种时间日期类型，一种是java8以前用的Date，一种是Java8以后主推的LocalDateTime，所以现在都是使用LocalDateTime。</p>

<p>一般格式为：<code class="language-plaintext highlighter-rouge">2021-01-01 18:30：00</code>java.time.LocalDateTime</p>

<p>ISO 8601 格式和我们中国国内格式不一样 所以一般需要java.time.format.DateTimeFormatter来输出指定格式的字符串。</p>

<p>同时也可以使用 LocalDateTime.parse来把字符串转换成时间类型。</p>

<p>一般时间属性使用变量名<code class="language-plaintext highlighter-rouge">gmtCreated</code></p>

<h3 id="44-接口介绍">4.4 接口介绍</h3>

<p>要想支持多个用户的注册，需要借助Java的集合来存储</p>

<blockquote>
  <p>也可以使用数组来存储，算法相关的会使用到数组，绝大多数情况下，都是使用集合类来存储的。</p>
</blockquote>

<p>与集合有关的还有两个知识点</p>

<ul>
  <li>接口</li>
  <li>集合接口</li>
</ul>

<p>接口是Java语言体系里非常高级和重要的一个能力，现代的Java程序里基本离不开接口，Java的源代码也是大量基于接口来开发的</p>

<blockquote>
  <p>接口是Java编程语言中的一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而继承接口的抽象方法。</p>
</blockquote>

<p>接口通俗理解来看就像一堆方法的集合，只不过这个方法只是做了接口的约定。一个接口可以有很多种实现，方法的重载。Java当中集合也有专门的接口定义的，Collection这个接口就可以表明支持存储多个元素</p>

<p>Collection接口有三种子类型，List、Set 和 Queue（他们都继承于 Collection），再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap等等。</p>

<p>集合框架是一个用来代表和操作集合的统一架构。所有的集合框架都包含如下内容：</p>

<ul>
  <li>
    <p>接口: 代表集合的抽象数据类型 如Collection、List、Set、Map等。通过多个接口，为了以不同的方式操作集合对象。</p>
  </li>
  <li>
    <p>实现(类) ： 是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构。</p>
  </li>
  <li>
    <p>算法：实现集合接口的对象里的方法执行的一些有用的计算。</p>
  </li>
</ul>

<p>除了集合，该框架也定义了几个Map接口和类。Map里存储的是键/值对。尽管Map不是集合，但是它完全整合在集合中.</p>

<p><img src="images/java-coll.jpg" alt="java-coll" style="zoom:67%;" /></p>

<h3 id="45-arraylist">4.5 ArrayList</h3>

<p><code class="language-plaintext highlighter-rouge">java.util.List</code>接口有几个常用的方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span><span class="no">E</span> <span class="n">element</span><span class="o">):</span><span class="n">将指定的元素</span><span class="err">，</span><span class="n">添加到该集合中的指定位置上</span><span class="err">。</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">):</span><span class="n">返回集合中指定位置的元素</span><span class="err">。</span>
<span class="kd">public</span> <span class="no">E</span> <span class="nf">remove</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">):</span><span class="n">移除列表中指定位置的元素</span><span class="err">，</span><span class="n">返回的是被移除的元素</span><span class="err">。</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">():</span><span class="n">取得集合里元素的个数</span><span class="err">，</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">(</span> <span class="o">);</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">():</span><span class="n">删除所有元素</span><span class="o">,</span><span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</code></pre></div></div>

<p>在Java当中接口是不能直接被实例化的，所以如果想要创建一个接口类型的变量，得需要new 实现类。</p>

<p><code class="language-plaintext highlighter-rouge">java.util.List</code>接口的实现类一般会用 <code class="language-plaintext highlighter-rouge">java.util.ArrayList</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 创建一个字符串集合，用于存储多个字符串</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="c1">// 创建一个用户集合，用于存储多个用户信息</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h3 id="46-循环">4.6 循环</h3>

<p>在已经学习完List后， 已经具备了操作集合的能力</p>

<p>但是在目前掌握的集合能力，还少了一个非常重要和高频的场景-循环。</p>

<p>常见的有：</p>

<ul>
  <li>for i</li>
  <li>for</li>
  <li>while</li>
  <li>do while</li>
</ul>

<h3 id="47-常量">4.7 常量</h3>

<p>在处理注册用户的数据时，常常使用常量来进行存储集合数据。</p>

<ul>
  <li>常量本质上也是一种类变量，只是多了一个static关键字常量，也叫做静态变量。</li>
  <li>常量可以通过：ClassName.VariableName的方式访问.</li>
  <li>常量在第一次被访问时创建，在程序结束时销毁</li>
  <li>无论一个类创建了多少个对象，类只拥有类变量一份拷贝。</li>
</ul>

<h3 id="51-文件系统摘要">5.1 文件系统摘要</h3>

<p>在之前的程序中有一个问题，那就是在Java程序重启后，之前注册的数据都会丢失掉。</p>

<blockquote>
  <p>常量数据是储存在Java的内存里，所以当程序重启后内存的数据会丢失的。</p>
</blockquote>

<p>所以，如果不想数据丢失，就需要考虑数据持久化，一般持久化有两种手段</p>

<ul>
  <li>存储在文件系统里面</li>
  <li>存储在数据库里（如mysql，mongodb）</li>
</ul>

<p>为了存储所有的注册数据，就需要借助Java的文件系统把User集合数据存储，需要掌握以下知识点：</p>

<ul>
  <li>异常</li>
  <li>文件</li>
  <li>commons-io 库</li>
  <li>读写文件</li>
  <li>JSON</li>
</ul>

<p>在掌握这些知识前，优先要掌握的是语法和代码的作用。</p>

<h3 id="52-异常">5.2 异常</h3>

<p>在一个程序中，最需要重视的就是Bug。为了更好地防备Bug，这就需要借助Java的异常处理，异常时程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>

<p>比如代码少了一个分号，运行结果提示是错误 <code class="language-plaintext highlighter-rouge">java.lang.Error</code>如果能用System.out.println(11/0)，这种用0作为除数，会抛出<code class="language-plaintext highlighter-rouge">java.lang.ArithmeticException</code>的异常</p>

<p>异常发生的原因有很多，但通常包括以下几个大类：</p>

<ul>
  <li>用户输入了非法数据</li>
  <li>要打开的文件不存在</li>
  <li>网络通信时连接中断，或者JVM内存溢出</li>
</ul>

<p>这些异常有的事因为用户错误引起的，有的事程序错误引起的，还是其他一些事因为物理错误引起的。</p>

<p>运行时异常</p>

<p>运行时异常是可以被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</p>

<p>错误</p>

<p>错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当程序的内存溢出了（需要的内存大于机器内存），一个错误就发生了，它们在编译也检查不到。</p>

<p><strong>捕获异常</strong></p>

<p>使用try和catch关键字可以捕获异常。try/catch的语法如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span>
<span class="o">{</span>
   <span class="c1">// 程序代码</span>
<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">ExceptionName</span> <span class="n">e1</span><span class="o">){</span>
   <span class="c1">//Catch 块</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Catch语句包含要捕获异常类型的声明，当保护代码块中发生一个异常时，try后面的catch块就会被检查。如果发生的异常包含在catch块，这和传递一个参数到方法时一样的。</p>

<h3 id="53-文件读">5.3 文件读</h3>

<p>在Java生态里使用最多的第三方工具集时：</p>

<p>Apache Commons</p>

<p>Apache Commons 包含了很多开源工具，用于解决平时编程经常会遇到的各种问题，减少重复劳动。java的文件API处理有点复杂。Apache commons-io 库就是为了简化 Java IO操作的，可以很轻松的读写文件，在企业中也很少直接运用JAva原生API操作文件读写，所以 commons-io 库是必须要掌握的能力</p>

<p>配置 Apache commons-io</p>

<p>找到工程中的 <code class="language-plaintext highlighter-rouge">pom.xml</code>文件，在<code class="language-plaintext highlighter-rouge">&lt;dependencies&gt;</code>节点里添加如下的内容</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>commons-io<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>commons-io<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>2.10.0<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>在读取目录 data 下的xxxx.txt文件，会有一个FileUtils的readLines方法，这个方法在按行读取文件的场景里使用得特别多，在全部读取时，就使用 readFileToString方法。</p>

<h3 id="54-json数据">5.4 JSON数据</h3>

<p>对于文件按行读取再解析也还是挺复杂的，实际上企业中有个更成熟和优雅的方案，即是基于JSON来进行文件解析。</p>

<p>JSON ：JavaScript Object Notation 是目前最常用的执行对象序列的方式。</p>

<p>虽然 json最初是为了在Java Script 语言中使用的，但实际上 json本身与语言没有任何关系，各种编程语言都可以使用，json也能作为一种跨语言的文本数据（即不支持其它多媒体）交换格式，无障碍的把数据传递到其它语言的程序</p>

<blockquote>
  <p>JSON 基本格式：</p>
</blockquote>

<p>必须是 <strong>对象</strong>： {} ， 或者是 <strong>数组</strong> []</p>

<ul>
  <li>
    <p>数据用 <code class="language-plaintext highlighter-rouge">名称:值</code> 键值对表示</p>
  </li>
  <li>
    <ul>
      <li>名称（键）必须是字符串</li>
    </ul>
  </li>
  <li>
    <ul>
      <li>键、值之间用冒号 <code class="language-plaintext highlighter-rouge">:</code>分隔。</li>
    </ul>
  </li>
  <li>多条数据之间，用逗号<code class="language-plaintext highlighter-rouge">,</code>分隔</li>
  <li>上面的 : , 均为半角符号</li>
</ul>

<p>JSON值的类型：</p>

<ul>
  <li>数字（整数或浮点数）</li>
  <li>字符串</li>
  <li>逻辑值 boolean</li>
  <li>数组</li>
  <li>对象</li>
  <li>null</li>
</ul>

<p>目前企业中广泛使用spring boot 框架来搭建应用， SpringBoot内部集成了jackson这个json框架，大多数时候，为们还是用Jackson来处理json</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@JsonDeserialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="nc">LocalDateTimeDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@JsonSerialize</span><span class="o">(</span><span class="n">using</span> <span class="o">=</span> <span class="nc">LocalDateTimeSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@JsonFormat</span><span class="o">(</span><span class="n">shape</span> <span class="o">=</span> <span class="nc">JsonFormat</span><span class="o">.</span><span class="na">Shape</span><span class="o">.</span><span class="na">STRING</span><span class="o">,</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">"yyyy-MM-dd HH:mm:ss"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">gmtCreated</span><span class="o">;</span>
</code></pre></div></div>

<h3 id="55-写文件">5.5 写文件</h3>

<p>FileUtils.writeStringToFile(file , data , charsetName) 同样会抛出异常， 需要try catch环绕。</p>

:ET